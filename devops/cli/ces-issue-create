#!/usr/bin/env bash

# colors pallet
CT='\033[0;33m'
CI='\033[0;32m'
CE='\033[0;31m'
CD='\033[0;00m'
CM='\033[0;00m'

LOGIN=$($CLI_PATH/util/github-credentials --login)
USER=$($CLI_PATH/util/github-credentials --user)
NICK=$($CLI_PATH/util/user-credentials $USER --slack)
USERS_FILE=$(cat $CLI_PATH/stash/users.csv)

# contains labels formatted by: prefix:value
LABELS=$(curl -s -X GET -u $LOGIN $GITHUB_REPOSITORY/labels \
  | grep name \
  | grep -v Stage \
  | sed 's/"//g;s/,//g' \
  | awk '{print $2 $3}'
)

# contains milestones formatted by: id:prefix:value
MILESTONES=$(curl -s -X GET -u $LOGIN $GITHUB_REPOSITORY/milestones \
  | grep -E 'number|title' \
  | tr -d '[:space:]' \
  | sed 's/"//g;s/,//g;s/number:/\n/g;s/title//g;' \
  | sed '1{/^$/d};$a\\r'
)

# contains all Github users
ASSIGNEES=$(printf "${USERS_FILE}" | awk -F$';' '{print $2}' | sed '1d')

# contains Stage prefix name
STAGE_PREFIX=Stage

# contains labels prefixes names without repetition
GENERAL_PREFIXES=$(printf "${LABELS}" \
  | awk -F$':' '{print $1}' \
  | awk '!a[$0]++'
)

# contains selection titles
declare -A HEADERS=(
  [Category]='Select at least one category:\nUsage: enter 0 for multiple choose'
  [Milestone]='Select the milestone:'
  [Priority]='Select the priority:'
  [Stage]='Select the stage:'
  [Type]='Select the type:'
  [Assignee]='Assign a github user to this issue\nUsage: enter 0 to no assign:'
  [Description]='Enter issue description:\nUsage: enter /end when it was done\n'
  [Title]='Enter the issue title:'
)

# contains the selected milestone
ISSUE_MILESTONE=''

# contains the selected assignee
ISSUE_ASSIGNEE=''

# contains all the selected labels
ISSUE_LABELS=()

# contains the issue description
ISSUE_DESCRIPTION=''

# contains the issue title
ISSUE_TITLE=''

# increments ISSUE_LABELS with the selected label prefixing it
set_issue_label()
{
  echo -e "${CI}> Selected label: ${2}${CM}"
  [[ $2 == *'general'* ]] && return 1
  ISSUE_LABELS=(${ISSUE_LABELS[@]} "${1}: ${2}")
}

# returns all labels filtered by prefix
get_prefixed_labels()
{
  printf "${LABELS}" | grep $1 | awk -F$':' '{print $2}'
}

# returns allowed stage labels, based on Category chosen
get_stage_labels()
{
  local backlog_type='general'

  for label in ${ISSUE_LABELS[@]}; do
    [[ $label == *'Devops'* ]] && backlog_type='devops'
  done

  echo "Backlog-${backlog_type}"
  echo 'To-do'
}

# request the user to select multiple labels in the category options list
set_issue_multiple_labels()
{
  local prefix=$1
  local options=$2
  local options_length=$(printf "${options}" | awk 'END {print NR}')

  local error_message='Error: You must enter just valid numbers'
  local usage_message='Usage: separate number using comma. sample: 1,4'
  local label=''

  printf "${CT}${usage_message}${CM}\n#? "
  read chosen

  # chosen validation, must be integer numbers and be allowed index
  for label_index in ${chosen//,/ }; do
    re='^[0-9]+$'
    [[ ! $label_index =~ $re || $label_index -gt $options_length ]] && {
      echo -e "${CE}${error_message}${CM}"
      set_issue_multiple_labels $prefix "$options"
      return 1
    }
  done

  # if validations is OK, calls set_issue_label
  for label_index in ${chosen//,/ }; do
    label=$(echo $options | awk "{print \$$label_index}")
    set_issue_label $prefix $label
  done
}

# requests the user to select a label in the options list
select_label()
{
  local prefix=$1
  local options=$2
  local error_message='Error: you must choose a valid option'

  echo -e "${CT}${HEADERS[$prefix]}${CM}"

  select label in $options; do
    if [[ -n $label ]]; then
      set_issue_label $prefix $label
      break
    elif [[ $prefix == 'Category' ]]; then
      set_issue_multiple_labels $prefix "${options}"
      break
    else
      echo -e "${CE}${error_message}${CM}"
    fi
  done

  printf "${CD}"
}

# requests the user to select a milestone, based on Category chosen
select_milestone()
{
  local prefix_general='Plataforma'
  local grep_type=''

  for label in ${ISSUE_LABELS[@]}; do
    [[ $label == *'Devops'* ]] && grep_type='-v'
  done

  local options=$(printf "$MILESTONES" \
    | grep $grep_type $prefix_general \
    | awk -F$':' '{print $3}'
  )

  echo -e "${CT}${HEADERS[Milestone]}${CM}"

  select milestone in $options; do
    echo -e "${CI}> Selected milestone: ${milestone}${CM}"
    ISSUE_MILESTONE=$(printf "$MILESTONES" | grep $milestone)
    break
  done
}

# requests the user to assign or not a user to the issue
select_assignee()
{
  echo -e "${CT}${HEADERS[Assignee]}${CM}"

  select assignee in $ASSIGNEES; do
    if [[ -n $assignee ]]; then
      echo -e "${CI}> Selected assignee: ${assignee}${CM}"
      ISSUE_ASSIGNEE=$assignee
    fi
    break
  done
}

# requests the user to enter issue title and description
describe_issue()
{
  echo -e "${CT}${HEADERS[Title]}${CM}"
  read -e ISSUE_TITLE

  printf "${CT}${HEADERS[Description]}${CM}"
  while read line; do
    [[ $line == '/end' ]] && break
    ISSUE_DESCRIPTION="${ISSUE_DESCRIPTION}${line}\n"
  done
}

# returns github issue json format
format_github_issue()
{
  local title="\"title\":\"${ISSUE_TITLE}\""
  local description="\"body\":\"${ISSUE_DESCRIPTION}\""
  local assignee="\"assignees\":[\"${ISSUE_ASSIGNEE}\"]"
  local milestone="\"milestone\":$(echo $ISSUE_MILESTONE | awk -F':' '{print $1}')"
  local labels="\"labels\":[$(printf '"%s %s",' ${ISSUE_LABELS[@]} | sed 's/\(.*\),/\1/')]"
  echo "{$title,$description,$assignee,$milestone,$labels}"
}

# returns slack notification json attachment format
format_slack_notification()
{
  local issue_url="<https://github.com/sices/sices/issues/${1}|issue-${1}>"
  local message="*${NICK}* created ${issue_url}"
  local pretext="\"pretext\":\"TÃ­tulo: ${message}\""
  local text="\"text\":\"${ISSUE_TITLE}\""

  local milestone="$(echo $ISSUE_MILESTONE | awk -F$':' '{print $3}')"
  local assignee=$ISSUE_ASSIGNEE
  [[ -z assignee ]] && assignee='No Assignee'

  local stage='Backlog-general'
  for i in "${ISSUE_LABELS[@]}"; do
    [[ $i == *'Stage'* ]] && stage=$(echo $i | awk -F$':' '{print $2}')
  done

  stage="{\"title\":\"Column\",\"value\":\"${stage/-/ }\",\"short\":true}"
  assignee="{\"title\":\"Assignee\",\"value\":\"${assignee}\",\"short\":true}"
  milestone="{\"title\":\"Milestone\",\"value\":\"${milestone}\",\"short\":true}"

  local fields="\"fields\": [$assignee,$stage,$milestone]"
  local color="\"color\":\"#F1A900\""
  local markdown="\"mrkdwn_in\": [\"pretext\"]"

  echo "{\"attachments\":[{$pretext,$text,$fields,$color,$markdown}]}"
}

for prefix in ${GENERAL_PREFIXES[@]}; do
  select_label $prefix "$(get_prefixed_labels $prefix)"
done
select_label $STAGE_PREFIX "$(get_stage_labels)"

select_milestone
select_assignee
describe_issue

issue=$(format_github_issue)
ISSUE_NUMBER=$(curl -s -X POST -u $LOGIN -d "$issue" $GITHUB_REPOSITORY/issues \
  | grep -m 1 number \
  | awk '{print $2}' \
  | sed 's/,//g;'
)

if [[ -n $ISSUE_NUMBER ]]; then
  echo -e "${CI}issue ${ISSUE_NUMBER} successfully created${CM}"
  notification=$(format_slack_notification $ISSUE_NUMBER)
  $CLI_PATH/ces-slack-notify --tasks "${notification}" --json

  if [[ $1 == '--start' ]]; then
    $CLI_PATH/ces-issue-start $ISSUE_NUMBER
  fi
else
  echo -e "${CE}an excepected error has occurred${CM}"
fi

printf "${CD}"
