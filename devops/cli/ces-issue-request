#!/usr/bin/env bash

if [[ -z $1 ]] || [ $1 = '--help' ] || [ $1 = '-h' ]; then
  printf "ces-issue-request - help:
  Usage:
  ces-issue-request --[REQUEST_TYPE] [ISSUE_NUMBER] \n
  Exemple:
  ces-issue-request --review 100 \n"
  exit 0;
fi

BRANCH_CURRENT=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')
BRANCH=$([[ $2 ]] && echo "issue-$2" || echo $BRANCH_CURRENT)
ISSUE=${BRANCH/issue-/}

USER=$($CLI_PATH/util/github-credentials --user)
NICK=$($CLI_PATH/util/user-credentials $USER --slack)
LOGIN=$($CLI_PATH/util/github-credentials --login)

open_pull_request() {
  local head="sices:$BRANCH"
  local base="master"
  local title="$BRANCH"
  local body="connect to #$ISSUE"

  local json="{\"head\":\"$head\",\"base\":\"$base\",\"title\":\"$title\",\"body\":\"$body\"}"
  echo $(curl -s -X POST -u $LOGIN -d "$json" $GITHUB_REPOSITORY/pulls)
}

get_pull_request_number() {
  read x
  echo $x | grep \"number\" | grep -oP '(?<="number": ).*(?=, "state")'
}

get_pull_request_state() {
  local info=$(curl -s -X GET -u $LOGIN $GITHUB_REPOSITORY/pulls/$1)
  echo $info | python -m json.tool | grep -oP '(?<="state": ").*(?=",)'
}

get_pull_request_current() {
  local number=$(tail -n1 $PR_FILE | tr -d "[:space:]")
  local state=$(get_pull_request_state $number)

  if [[ $state != 'closed' ]]; then
    echo $number
  else
    > $PR_FILE
    echo
  fi
}

PR_FILE=$CLI_PATH/stash/temp/.ces-pull-request
[[ -f $PR_FILE ]] && PR_CURRENT=$(get_pull_request_current)

if [[ $1 == '--review' ]]; then

  if [[ $BRANCH != $BRANCH_CURRENT ]]; then
    git stash
    git checkout -b $BRANCH
    git push origin $BRANCH
    git checkout -b $BRANCH_CURRENT
    git stash apply
  else
    git push origin $BRANCH
  fi

  if [[ -z $PR_CURRENT ]]; then
    echo 'Creating Github pull request...'
    pr=$(open_pull_request | get_pull_request_number)
  else
    pr=$PR_CURRENT
  fi

  if [[ -z $pr ]]; then
    echo 'Error: could not proccess pull request, maybe everything is updated'
    exit 1
  else
    echo $pr > $PR_FILE
  fi

  url="https://github.com/sices/sices/pull/$pr/files"
  message="[$BRANCH] @here: _${NICK}_ needs a *REVIEW*: $url"

  $CLI_PATH/ces-slack-notify --devops "$message"
  $CLI_PATH/ces-issue-move $ISSUE --review

elif [[ $1 == '--testing' ]]; then
  read -p 'Enter some additional testing information and/or press ENTER to go: ' additional > /dev/tty

  message="[$BRANCH] _${NICK}_ has requested a use *TEST*"
  $CLI_PATH/ces-slack-notify --devops "$message"

  [[ -n $additional ]] && message="${message}: _${additional}_"
  $CLI_PATH/ces-slack-notify --tester "$message"

  $CLI_PATH/ces-issue-move $ISSUE --testing-product
else
  echo "Error: invalid argument $1"
  exit 1
fi
