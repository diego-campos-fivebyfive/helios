<script>

    var input_lat = $('#{{ latitude }}');
    var input_lng = $('#{{ longitude }}');

    function initMapHandler() {

        var init_latitude = input_lat.length && input_lat.val() ? input_lat.val() : -11.7242207;
        var init_longitude = input_lng.length && input_lng.val() ? input_lng.val() : -51.2531367;

        var map = new google.maps.Map(document.getElementById('map'), {
            center: {
                lat: parseFloat(init_latitude),
                lng: parseFloat(init_longitude)
            },
            zoom: {{ zoom}},
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        {% if input is defined %}

        var input = document.getElementById('{{ input }}');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // [START region_getplaces]
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });

            markers = [];

            //source_search.val(places[0].formatted_address);
            //target_search.val(places[0].formatted_address);
            input_lat.val(places[0].geometry.location.lat()).trigger('change');
            input_lng.val(places[0].geometry.location.lng()).trigger('change');

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                var marker = new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    //draggable: true,
                    position: place.geometry.location
                });

                marker.addListener('dragend', function (event) {
                    console.log(marker);
                });

                markers.push(marker);

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });

            map.fitBounds(bounds);

        });

        {% endif %}
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBRqk_jRCGegXQYjJHGU7NGhpare_GqLjI&libraries=places&callback=initMapHandler"
        async defer></script>
