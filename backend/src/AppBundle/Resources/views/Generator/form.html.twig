{% set enablePromotional = attribute(form, 'is_promotional') is defined %}

{{ form_start(form,{attr:{id:'form_generator'}}) }}
<style>
    .font-normal {
        font-weight: normal  !important;
    }
    .font-promotional {
        font-size: 15px;
    }
</style>
<div class="row">

    {% if enablePromotional %}
        <div class="form-group" id="block_promo_selector">
            <div class="col-md-12 text-center" style="margin-bottom: 10px;">
                <div class="alert alert-success" id="promo_background">
                    {{ form_widget(form.is_promotional) }}
                    <div id="promo_notice">
                    </div>
                </div>
            </div>
        </div>
    {% endif %}

    <div class="form-group">
        <div class="col-md-3">
            <div class="row col-xs-12">
                {{ form_label(form.power, 'Informe a Potência (kWp)',{label_attr:{id:'generator_source_label'}}) }}
            </div>
            <div class="row">
                <div class="col-md-6 middle-block col-xs-6">
                    {{ form_widget(form.source,{attr:{class:'form-control'}}) }}
                </div>
                <div class="middle-block col-xs-6">
                    {{ form_widget(form.power,{attr:{class:'form-control'}}) }}
                    {{ form_widget(form.consumption,{attr:{class:'form-control'}}) }}
                </div>
            </div>
        </div>
        <div class="col-md-2 col-xs-6">
            {{ form_label(form.module, 'Módulo') }}
            {{ form_widget(form.module,{attr:{class:'form-control'}}) }}
        </div>
        <div class="col-md-3 col-xs-6">
            {{ form_label(form.inverter_maker, 'Fab. Inversor') }}
            {{ form_widget(form.inverter_maker,{attr:{class:'form-control'}}) }}
        </div>
        <div class="col-md-2 col-xs-6">
            {{ form_label(form.string_box_maker, 'Fab. String Box') }}
            {{ form_widget(form.string_box_maker,{attr:{class:'form-control'}}) }}
        </div>
        <div class="col-md-2 col-xs-6">
            {{ form_label(form.structure_maker, 'Fab. Estrutura') }}
            {{ form_widget(form.structure_maker,{attr:{class:'form-control'}}) }}
        </div>
    </div>
</div>

<div class="row" style="margin-top: 1rem;">
    <div class="form-group">
        <div class="col-md-3 col-xs-6">
            {{ form_label(form.roof_type, 'Tipo de Telhado') }}
            {{ form_widget(form.roof_type,{attr:{class:'form-control'}}) }}
        </div>
        <div class="col-md-2 col-xs-6">
            {{ form_label(form.grid_voltage, 'Tensão') }}
            {{ form_widget(form.grid_voltage,{attr:{class:'form-control'}}) }}
        </div>
        <div class="col-md-2 col-xs-6">
            {{ form_label(form.grid_phase_number, 'Fases') }}
            {{ form_widget(form.grid_phase_number,{attr:{class:'form-control'}}) }}
        </div>
        <div class="col-md-3 col-xs-6" style="font-size: 12px; margin-top: 30px;">
            {{ form_widget(form.use_transformer) }} &nbsp;
            {{ form_label(form.use_transformer, 'Incluir transformador se necessário') }}
        </div>

        <div class="col-md-2">
            <label> &nbsp; </label>
            <button type="submit" class="btn btn-success btn-block ladda-button" data-style="zoom-in">
                <i class="fa fa-check"></i> Recalcular
            </button>
        </div>

        <div class="hide">
            <input type="text" id="generator_option" name="_option" value="config">
            {{ form_rest(form) }}
        </div>
    </div>
</div>

<div class="row">
    <div class="hr-line-dashed"></div>
</div>

{{ form_end(form) }}

<script>

    var promo_phrase = $('#generator_promo_notice').val();
    var promo_back = $('#generator_promo_background').val();
    $('#promo_notice').html(promo_phrase);
    $('#promo_background').css('background-color', promo_back);

    var FormGenerator = {
        form: $('#form_generator'),
        container: null,
        sourceOption: null,
        field: function(id){
            return this.form.find('#generator_' + id);
        },
        value: function(id){
            return this.field(id).val();
        },
        post: function(url, data){

        },
        getOption: function(){
            return this.field('option').val();
        },
        getHandler: function(method){
            if('object' === typeof GeneratorHandler && GeneratorHandler.hasOwnProperty(method)){
                return GeneratorHandler;
            }
            return this.handler;
        },
        isProcessable: function(){
            var nullValues = 0;
            $.each(['module', 'inverter_maker', 'string_box_maker', 'structure_maker'], function(i, id){
                if(null == FormGenerator.field(id).val()){
                    nullValues += 1;
                }
            });
            return 0 == nullValues;
        },
        getMakers: function(callback){
            var form = this.form;
            $.post('{{ path('detect_makers') }}', form.serialize(), function(response){
                var makers = response.makers;
                if(!makers.length){
                    FormGenerator.field('inverter_maker').find('option').attr('disabled', 'disabled');
                }
                callback(makers);
            });
        },
        handleMakers: function(){
            FormGenerator.getMakers(function(makers){
                var options = FormGenerator.field('inverter_maker').find('option');
                $.each(options, function (i, option) {
                    var id = parseInt($(option).val());
                    if (makers.indexOf(id) >= 0) {
                        $(option).removeAttr('disabled');
                    } else {
                        $(option).attr('disabled', 'disabled');
                    }
                });
            });
        },
        checkSource: function(){
            var labels = {
                power: 'Informe a Potência (kWp)',
                consumption: 'Informe o Consumo (kWh)'
            };
            var option = this.value('source');
            this.field('source_label').html(labels[option]);
            if('power' == option){
                this.field('power').show();
                this.field('consumption').hide();
            }else{
                this.field('consumption').show();
                this.field('power').hide();
            }
        },
        canProcess: function(){
            if('save' == this.getOption()){
                if(this.isProcessable()) {
                    FormGenerator.loader.ladda('start');
                    this.getMakers(function (makers) {
                        var makerId = parseInt(FormGenerator.field('inverter_maker').val());
                        if (makers.length && makers.indexOf(makerId) >= 0) {
                            FormGenerator.process(true);
                        } else {
                            FormGenerator.loader.ladda('stop');
                            FormGenerator.displayError('O inversor selecionado não é compatível com esta potência.');
                        }
                    });
                }else{
                    this.displayError('As configurações atuais não permitem a geração.');
                }
            }else{
                FormGenerator.process(true);
            }
        },
        checkGrid: function(choicePhase, choiceVoltage){

            if(!choicePhase){
                choicePhase = FormGenerator.field('grid_phase_number');
            }

            if(!choiceVoltage){
                choiceVoltage = FormGenerator.field('grid_voltage');
            }

            var checkOption = function() {
                var phase = choicePhase.val();
                var voltage = choiceVoltage.val();

                if ('Monophasic' == phase) {
                    choiceVoltage.find('option[value="220/380"]').attr('selected', 'selected');
                    choiceVoltage.find('option[value="127/220"]').attr('disabled', 'disabled');
                } else {
                    choiceVoltage.find('option').removeAttr('disabled');
                }

                if ('127/220' == voltage) {
                    choicePhase.find('option[value="Monophasic"]').attr('disabled', 'disabled');
                } else {
                    choicePhase.find('option').removeAttr('disabled');
                }
            };

            checkOption();

            choicePhase.on('change', function(){
                checkOption();
                FormGenerator.handleMakers();
            });

            choiceVoltage.on('change', function(){
                checkOption();
            });
        },
        listen: function(){

            this.field('is_promotional').on('change', function(){
                FormGenerator.field('option').val('config');
                FormGenerator.process();
            });

            this.field('source').on('change', function(){
                FormGenerator.checkSource();
            });

            this.field('power').on('change', function(){
                FormGenerator.handleMakers();
            });

            this.field('consumption').on('change', function(){
                FormGenerator.handleMakers();
            });

            this.form.on('submit', function(event){
                event.preventDefault();
                FormGenerator.field('option').val('save');
                FormGenerator.process();
            });

            this.checkSource();
            this.checkGrid();

        },
        process: function(allow){
            if('boolean' !== typeof allow){
                allow = this.canProcess();
            }
            if(allow) {
                FormGenerator.onPreProcess();
                var data = this.form.serialize();
                Request.send({
                    url: FormGenerator.form.attr('action'),
                    method: 'post',
                    data: data,
                    callback: function (xhr) {
                        FormGenerator.onProcess(xhr);
                    }
                });
            }
        },
        configure: function(){
            this.container = this.form.closest('div');
            this.loader = this.form.find('[type="submit"]');
            this.helper.mask(this.field('power'));
            this.helper.mask(this.field('consumption'));
            this.loader.ladda();
        },
        helper: {
            decimal: function(element) {
                function clear(v) {
                    return v.replace(/\D+/g, '');
                }
                var value = element.val();
                var backup = value.replace(/\./g, ',');
                value = clear(value);
                if (backup.indexOf(',') > 0) {
                    var commas = backup.split(',');
                    value = clear(commas[0]) + ',';
                    if (commas[1].length) {
                        value += clear(commas[1]);
                    }
                }
                if (0 == backup.indexOf('-')) {
                    if (2 == backup.split('-').length) {
                        value = '-' + value;
                    }
                }
                element.val(value);
            },
            mask: function(element){
                element.on('keyup', function () {
                    FormGenerator.helper.decimal(element);
                }).trigger('keyup');
            }
        },
        init: function(){
            this.configure();
            this.listen();
        },
        /**
         * These methods serve as the process interface
         * for internal events, do not remove
         */
        handler: {
            /**
             * Fired before process
             */
            onPreProcess: function(){},
            /**
             * Handles the generator processing response
             * @param xhr
             */
            onProcess: function (xhr) {
                FormGenerator.loader.ladda('stop');
                var option = FormGenerator.field('option').val();
                if ('save' != option) {
                    FormGenerator.container.html(xhr.responseText);
                    FormGenerator.onResetProject();
                } else {
                    var response = xhr.responseJSON;
                    if (response && !response.hasOwnProperty('error')) {
                        FormGenerator.onSaveProject(response.project);
                        return;
                    }
                    var error = response && response.hasOwnProperty('error') ? response.error : 'As configurações atuais não foram processadas';
                    this.displayError(error);
                }
            },
            /**
             * This method handles a saved project
             * Most used in custom treatments,
             * through GeneratorHandler objects
             * @param project
             */
            onSaveProject: function(project){},
            /**
             * Fired after project reset
             * @param project
             */
            onResetProject: function(project){},
            displayError: function(error){
                swal('Ooops', error, 'warning');
            }
        },
        displayError: function(error){
            this.getHandler('displayError').displayError(error);
        },
        onPreProcess: function(){
            this.getHandler('onPreProcess').onPreProcess();
        },
        onProcess: function(xhr){
            this.getHandler('onProcess').onProcess(xhr);
        },
        onSaveProject: function(project){
            this.getHandler('onSaveProject').onSaveProject(project);
        },
        onResetProject: function(){
            this.getHandler('onResetProject').onResetProject();
        }
    };

    FormGenerator.init();

</script>
