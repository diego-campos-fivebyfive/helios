{% set isPromo = project.defaults.is_promotional %}

<style>
    .line-padding {
        padding-top: 4rem !important;
    }

    {% if isPromo %}
    .cost-col {
        display: none;
    }

    {% endif %}

</style>


<table class="col-md-12 table flow-lg">
    <thead>
    <tr>
        <td colspan="4">

            {{ form_start(form,{attr:{id:'form_project', action: app.request.uri}}) }}

            <div class="row">
                <div class="form-group">
                    <div class="col-md-3 col-xs-4">
                        {{ form_label(form.power, 'Potência',{label_attr:{id:'source_label'}}) }}
                        {{ form_widget(form.power,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-2 col-xs-4">
                        {{ form_label(form.module, 'Módulo') }}
                        {{ form_widget(form.module,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-3 col-xs-4">
                        {{ form_label(form.inverter_maker, 'Fab. Inversor') }}
                        {{ form_widget(form.inverter_maker,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-2 col-xs-4">
                        {{ form_label(form.string_box_maker, 'Fab. String Box') }}
                        {{ form_widget(form.string_box_maker,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-2 col-xs-4">
                        {{ form_label(form.structure_maker, 'Fab. Estrutura') }}
                        {{ form_widget(form.structure_maker,{attr:{class:'form-control'}}) }}
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top: 1rem;">
                <div class="form-group">
                    <div class="col-md-3 col-xs-4">
                        {{ form_label(form.roof_type, 'Tipo de Telhado') }}
                        {{ form_widget(form.roof_type,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-2 col-xs-4">
                        {{ form_label(form.grid_voltage, 'Tensão') }}
                        {{ form_widget(form.grid_voltage,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-2 col-xs-4">
                        {{ form_label(form.grid_phase_number, 'Fases') }}
                        {{ form_widget(form.grid_phase_number,{attr:{class:'form-control'}}) }}
                    </div>
                    <div class="col-md-3 col-xs-4" style="font-size: 12px; margin-top: 1rem;">
                        <label style="display: block;"> &nbsp; </label>
                        {{ form_widget(form.use_transformer) }} &nbsp;
                        {{ form_label(form.use_transformer, 'Incluir transformador se necessário') }}
                        <br>
                        {{ form_widget(form.is_promotional) }} &nbsp;
                        {{ form_label(form.is_promotional, 'Utilizar tabela promocional') }}
                    </div>

                    <div class="hide">
                        {{ form_rest(form) }}
                    </div>

                    <div class="col-md-2  col-xs-4">
                        <label> &nbsp; </label>
                        <button type="submit" class="btn btn-success btn-block ladda-button" data-style="zoom-in">
                            <i class="fa fa-check"></i> {{ project.id is not null ? 'Recalcular' : 'Gerar' }}
                        </button>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="hr-line-dashed"></div>
            </div>

            {{ form_end(form) }}

        </td>
    </tr>
    <tr class="flow-lg">
        <th width="15%"> Código</th>
        <th> Descrição</th>
        <th width="15%"><span class="cost-col">Custo</span></th>
        <th width="10%" align="center"> Quantidade</th>
    </tr>
    </thead>
    <tbody>

    {# MODULES #}
    {% for projectModule in project.projectModules %}
        <tr>
            <td> {{ projectModule.module.id }} </td>
            <td>
                {#<a data-toggle="modal" data-target="#modal_component"
                   data-url="{{ path('component_show', {type:'module', id:projectModule.module.id}) }}">#}
                {{ projectModule.module.model }}
                {#</a>#}
            </td>
            <td class="promotional"> {{ projectModule.unitCostPrice|currency }} </td>
            <td class="text-center"> {{ projectModule.quantity }} </td>
        </tr>
    {% endfor %}

    {# INVERTERS #}
    {% for id, group in project.groupInverters %}
        <tr>
            <td> {{ id }} </td>
            <td>
                {#<a data-toggle="modal" data-target="#modal_component"
                   data-url="{{ path('component_show', {type:'inverter', id:group.inverter.id}) }}">#}
                {{ group.inverter.model }}
                {#</a>#}
            </td>
            <td class="promotional"> {{ group.unitCostPrice|currency }} </td>
            <td class="text-center"> {{ group.quantity }} </td>
        </tr>
    {% endfor %}

    {# TRANSFORMER #}
    {% if project.transformer %}
        <tr>
            <td> {{ project.transformer.variety.code }} </td>
            <td> {{ project.transformer.variety.description }} </td>
            <td class="promotional"> {{ project.transformer.unitCostPrice|currency }} </td>
            <td> {{ 1 }} </td>
        </tr>
    {% endif %}

    {# STRING_BOXES #}
    {% for projectStringBox in project.projectStringBoxes %}
        <tr>
            <td> {{ projectStringBox.stringBox.code }} </td>
            <td>
                {#<a data-toggle="modal" data-target="#modal_component"
                   data-url="{{ path('stringbox_show', {id:projectStringBox.stringBox.id}) }}">#}
                {{ projectStringBox.stringBox.description }}
                {#</a>#}
            </td>
            <td class="promotional"> {{ projectStringBox.unitCostPrice|currency }} </td>
            <td class="text-center"> {{ projectStringBox.quantity }} </td>
        </tr>
    {% endfor %}

    {# STRUCTURES #}
    {% for projectStructure in project.projectStructures %}
        <tr>
            <td> {{ projectStructure.structure.code }} </td>
            <td>
                {#<a data-toggle="modal" data-target="#modal_component"
                   data-url="{{ path('structure_show', {id:projectStructure.structure.id}) }}">#}
                {{ projectStructure.structure.description }}
                {#</a>#}
            </td>
            <td class="promotional"> {{ projectStructure.unitCostPrice|currency }} </td>
            <td class="text-center"> {{ projectStructure.quantity }} </td>
        </tr>
    {% endfor %}

    {# VARIETIES #}
    {% for projectVariety in project.projectVarieties if projectVariety.variety.type != 'transformer' %}
        <tr>
            <td> {{ projectVariety.variety.code }} </td>
            <td> {{ projectVariety.variety.description }} </td>
            <td class="promotional"> {{ projectVariety.unitCostPrice|currency }} </td>
            <td class="text-center"> {{ projectVariety.quantity }} </td>
        </tr>
    {% endfor %}
    <tr>
        <th></th>
        <th></th>
        <th> {{ project.costPriceComponents|currency }} </th>
        <td></td>
    </tr>
    {% set projectModule = project.projectModules.first %}

    {% if projectModule %}

        <tr>
            <td colspan="4">

                <table class="hide">
                    <tbody id="template_lines">
                    <tr class="dist-line">
                        <td class="col-md-4 line-padding">
                            <input placeholder="Número de Linhas" type="text" value="__lines__"
                                   class="form-control dist-line-number">
                        </td>
                        <td class="col-md-4 line-padding">
                            <input placeholder="Módulos por Linha" type="text" value="__modules__"
                                   class="form-control dist-line-module">
                        </td>
                        <td class="col-md-3">
                            <div class="btn-group btn-group-justified" data-toggle="buttons">
                                <label class="btn btn-default btn-position" data-position="0">
                                    Vertical <br>
                                    <img src="{{ asset('public/assets/images/opt_vertical.png') }}"/>
                                    <input name="line-position" type="radio" value="0">
                                </label>
                                <label class="btn btn-default btn-position" data-position="1">
                                    Horizontal <br>
                                    <img src="{{ asset('public/assets/images/opt_horizontal.png') }}"/>
                                    <input name="line-position" type="radio" value="1">
                                </label>
                            </div>
                        </td>
                        <td class="col-md-1 line-padding">
                            <button class="remove-dist-line btn btn-danger btn-block">
                                <i class="fa fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                    </tbody>
                </table>

                <table class="table">
                    <thead>
                    <tr>
                        <td colspan="4">
                            <div class="btn-group btn-group-md">
                                <button id="add-dist-line" class="btn btn-success">
                                    <i class="fa fa-plus"></i> Adicionar
                                </button>
                            </div>

                            <div class="btn-group btn-group-md">
                                <button class="btn btn-primary">
                                    Módulos : <span id="dist-counter"> {{ projectModule.quantity }} </span>
                                </button>
                            </div>

                            <div class="btn-group btn-group-md">
                                <button id="dist-checker" class="btn btn-danger">
                                    <strong> {{ projectModule.quantity }} </strong>
                                </button>
                            </div>
                        </td>
                    </tr>
                    </thead>
                    <tbody id="dist-container">
                    </tbody>
                    <tfoot>
                    <tr>
                        <td colspan="2">
                            <a id="add_project_to_order" class="btn btn-primary">
                                <i class="fa fa-arrow-down"></i> Adicionar ao orçamento atual
                            </a>
                        </td>
                        <td colspan="2">
                            <button data-style="zoom-in" class="btn btn-success pull-right ladda-button"
                                    id="btn-dist-submit">
                                <i class="fa fa-refresh"></i>
                                <span> Recalcular </span>
                            </button>
                        </td>
                    </tr>
                    </tfoot>
                </table>

            </td>
        </tr>

    {% endif %}

    </tbody>
</table>


<script>

    {% if isPromo %}
    var promoLabel = '<span class="label label-primary"> Promocional </span>';
    $.each($('.promotional'), function (i, row) {
        $(this).html(promoLabel);
    });
    {% endif %}

    var form_project = $('#form_project');
    var generate_makers = $('#generator_inverter_maker');
    var generator_power = $('#generator_power');
    var last_power = generator_power.val();
    var generator_g_phase = form_project.find('#generator_grid_phase_number');
    var generator_g_voltage = form_project.find('#generator_grid_voltage');


    OrderManager.register($('#add_project_to_order'));

    {% if projectModule %}

    GroupManager = {
        groups: {{ projectModule.groups|json_encode|raw }},
        container: $('#dist-container'),
        template: $('#template_lines').html(),
        counter: $('#dist-counter'),
        checker: $('#dist-checker'),
        max_count: {{ projectModule.quantity }},
        submit: $('#btn-dist-submit'),
        getInt: function (e) {
            return parseInt(e.val());
        },
        count: function () {

            var count = 0;
            $.each(GroupManager.groups, function (i, group) {
                count += (group.lines * group.modules);
            });

            return count;
        },
        remove: function (target) {
            var line = target.closest('.dist-line');
            line.remove();
        },
        check: function () {
            var count = GroupManager.count();
            if (GroupManager.max_count == count) {
                GroupManager.submit.removeAttr('disabled');
                GroupManager.checker.hide();
            } else {
                GroupManager.submit.attr('disabled', 'disabled');
                GroupManager.checker.show();
            }
            var diff = GroupManager.max_count - count;

            if (diff > 0) diff = '+' + diff;

            GroupManager.checker.html(diff);
        },
        touchspin: {
            update: function (input) {
                input.trigger('touchspin.updatesettings');
            },
            lines: function (input) {
                input.TouchSpin({
                    min: 1,
                    step: 1,
                    verticalbuttons: true,
                    prefix: 'Número de Linhas'
                }).on('change', function () {
                    var value = parseInt($(this).val());
                    var index = $(this).closest('tr').index();
                    var current = GroupManager.groups[index].lines;
                    if (value > current) {
                        if (GroupManager.count() >= GroupManager.max_count) {
                            $(this).val(current);
                        } else {
                            GroupManager.groups[index].lines = value;
                        }
                    } else {
                        GroupManager.groups[index].lines = value;
                    }

                    GroupManager.check();
                });
            },
            modules: function (input, max) {
                input.TouchSpin({
                    min: 1,
                    step: 1,
                    max: max,
                    verticalbuttons: true,
                    prefix: 'Módulos por Linha'
                }).on('change', function () {
                    var value = parseInt($(this).val());
                    var index = $(this).closest('tr').index();
                    var current = GroupManager.groups[index].modules;
                    if (value > current) {
                        if (GroupManager.count() >= GroupManager.max_count) {
                            $(this).val(current);
                        } else {
                            GroupManager.groups[index].modules = value;
                        }
                    } else {
                        GroupManager.groups[index].modules = value;
                    }

                    GroupManager.check();
                });
            }
        },
        register: function (line) {
            var lines = line.find('.dist-line-number');
            var modules = line.find('.dist-line-module');
            var position = line.find('input[name="line-position"]');
            var btnDelete = line.find('.remove-dist-line');
            GroupManager.touchspin.lines(lines);

            var currentPosition = line.find('.btn-position.active').data('position');
            GroupManager.touchspin.modules(modules, 0 == currentPosition ? 20 : 12);

            btnDelete.on('click', function () {
                if (GroupManager.groups.length > 1) {
                    var line = $(this).closest('tr');
                    GroupManager.groups.splice(line.index(), 1);
                    line.remove();
                    GroupManager.check();
                }
            });

            position.on('change', function () {
                var line = $(this).closest('tr');
                var value = parseInt($(this).val());
                $.each($(this).closest('.btn-group').find('label'), function (i, e) {
                    var label = $(e);
                    if (value == label.data('position')) {
                        label.addClass('active');
                    } else {
                        label.removeClass('active');
                    }
                });
                GroupManager.groups[line.index()].position = value;

                modules.trigger('touchspin.updatesettings', {
                    max: 0 == value ? 20 : 12
                });
            });
        },
        render: function (group) {
            if (!group.hasOwnProperty('rendered')) {

                var render = $(GroupManager.template
                    .replace(/__lines__/g, group.lines)
                    .replace(/__modules__/g, group.modules));

                GroupManager.container.append(render);

                var position = render.find('[data-position="' + group.position + '"]');
                position.addClass('active');
                position.find('input').attr('checked', 'checked');

                group.rendered = true;

                GroupManager.register(render);
            }
        },
        refresh: function () {
            $.each(GroupManager.groups, function (i, group) {
                GroupManager.render(group);
                if (i == GroupManager.groups.length - 1) {
                    GroupManager.check();
                }
            });
        }
    };

    GroupManager.refresh();

    $('#add-dist-line').on('click', function () {
        GroupManager.groups[GroupManager.groups.length] = {lines: 1, modules: 1, position: 0};
        GroupManager.refresh();
    });

    GroupManager.submit.ladda();
    GroupManager.submit.on('click', function () {
        $(this).ladda('start');
        $.each(GroupManager.groups, function (i, group) {
            delete group.rendered;
        });
        Request.send({
            url: '{{ path('project_groups',{id:project.id, precify:true}) }}',
            method: 'post',
            data: {groups: GroupManager.groups},
            callback: function (xhr) {
                GroupManager.submit.ladda('stop');
                ProjectGenerator.formProject();
            }
        });
        $.each(GroupManager.groups, function (i, group) {
            group.rendered = true;
        });
    });

    {% endif %}

    function checkGridOptions(choicePhase, choiceVoltage) {

        var checkOption = function () {
            var phase = choicePhase.val();
            var voltage = choiceVoltage.val();

            if ('Monophasic' == phase) {
                choiceVoltage.find('option[value="220/380"]').attr('selected', 'selected');
                choiceVoltage.find('option[value="127/220"]').attr('disabled', 'disabled');
            } else {
                choiceVoltage.find('option').removeAttr('disabled');
            }

            if ('127/220' == voltage) {
                choicePhase.find('option[value="Monophasic"]').attr('disabled', 'disabled');
            } else {
                choicePhase.find('option').removeAttr('disabled');
            }
        };

        checkOption();

        choicePhase.on('change', function () {
            checkOption();
        });

        choiceVoltage.on('change', function () {
            checkOption();
        });
    }

    checkGridOptions(generator_g_phase, generator_g_voltage);
    generator_g_phase.on('change', function () {
        detect_makers();
    });

    function get_available_makers(callback) {
        Request.send({
            url: '{{ path('detect_makers') }}',
            method: 'post',
            data: form_project.serialize(),
            callback: function (xhr) {
                var response = xhr.responseJSON;
                var makers = response.makers;
                if (!makers.length) {
                    generate_makers.find('option').attr('disabled', 'disabled');
                }
                callback(makers);
            }
        });
    }

    function detect_makers() {
        get_available_makers(function (makers) {
            if (!makers.length) {
                generator_power.val(last_power);
            } else {
                $.each(generate_makers.find('option'), function (i, option) {
                    var id = parseInt($(option).val());
                    if (makers.indexOf(id) >= 0) {
                        $(option).removeAttr('disabled');
                    } else {
                        $(option).attr('disabled', 'disabled');
                    }
                });
                if (1 == makers.length || null == generate_makers.val()) {
                    generate_makers.find('option[value="' + makers[0] + '"]').attr('selected', 'selected');
                }
            }
        });
    }

    generator_power.on('change', function () {
        detect_makers();
    }).on('focus', function () {
        last_power = $(this).val();
    });

    var button_config = form_project.find('[type="submit"]');
    button_config.ladda();
    form_project.on('submit', function (event) {
        event.preventDefault();
        button_config.ladda('start');
        get_available_makers(function (makers) {
            var maker_id = parseInt(generate_makers.val());
            if (makers.length && makers.indexOf(maker_id) >= 0) {
                Request.send({
                    url: form_project.attr('action'),
                    method: form_project.attr('method'),
                    data: form_project.serialize(),
                    callback: function (xhr) {
                        if (200 == xhr.status) {
                            var response = xhr.responseJSON;
                            if (response.hasOwnProperty('project')) {
                                Project = response.project;
                                if (Project.id) {
                                    var url = '{{ path('order_generator_project',{id:'_id_'}) }}'.replace(/_id_/g, Project.id);
                                    ProjectGenerator.formProject(url);
                                }
                            }
                            if (response.errors.length) {
                                swal('Ooops', response.errors[0], 'warning');
                            }
                        } else {
                            swal('Ooops', 'Houve um erro ao enviar a solicitação!', 'warning');
                        }
                        button_config.ladda('stop');
                    }
                });
            } else {
                button_config.ladda('stop');
                swal('Ooops', 'O inversor selecionado não é compatível com esta potência!', 'error');
            }
        });
    });

    var isPromotional = $('#generator_is_promotional');
    isPromotional.on('change', function(){

    });

</script>