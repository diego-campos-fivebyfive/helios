<style>
    .m-container {
        width: 100%;
        padding: 10px;
        float: left;
    }

    .m-header {
        width: 100%;
        float: left;
    }

    .m-header-left {
        width: 50%;
        float: left;
    }

    .m-header-right {
        width: 50%;
        float: left;
        overflow-x: hidden;
    }

    .m-cell-100 {
        width: 100px;
    }

    .m-cell-150 {
        width: 150px;
    }

    .m-cell-200 {
        width: 200px;
    }

    .m-cell-250 {
        width: 250px;
    }

    [class^="m-cell-"]>input{
        width: 100% !important;
    }

    .m-content {
        width: 100%;
        float: left;
    }

    .m-content-left {
        width: 50%;
        float: left;
        height: 400px;
        overflow-y: auto;
        direction: rtl;
    }

    .m-content-right {
        width: 50%;
        float: left;
        height: 420px;
        overflow: auto;
    }
    .block-field-prefix .input-group .input-group-addon{
        text-align: right;
        padding-right: 0;
    }
    .block-field-prefix .input-group input{
        padding-left: 5px;
        border-left: 0;
    }
    .block-field-suffix .input-group input:focus,
    .block-field-prefix .input-group input:focus{
        border-color: #e5e6e7 !important
    }
    .block-field-suffix .input-group .input-group-addon{
        text-align: left;
        padding-left: 0;
    }
    .block-field-suffix .input-group input{
        padding-right: 5px;
        border-right: 0;
        text-align: right;
    }
</style>


{% set powers = collection.powers %}

<div class="m-container">
    <div class="m-header">
        <div class="m-header-left">
            <table class="table table-bordered">

                <thead>
                <tr>
                    <th rowspan="2">
                        &nbsp;
                    </th>
                    <th>
                        <div class="m-cell-100">
                            Código
                        </div>
                    </th>
                    <th>
                        <div class="m-cell-200">
                            Descrição
                        </div>
                    </th>
                    <th>
                        <div class="m-cell-100">
                            NCM
                        </div>
                    </th>
                    <th>
                        <div class="m-cell-150">
                            CMV Aplicado
                        </div>
                    </th>
                </tr>
                <tr>
                    <th colspan="6">
                        &nbsp;
                    </th>
                </tr>

                </thead>
            </table>
        </div>
        <div class="m-header-right">
            <table class="table table-bordered">
                <thead>
                <tr>
                    {% for power in powers %}
                        <th colspan="2" class="text-center">
                            <div class="m-cell-250">
                                {{ attribute(power, 0) ~ ' - ' ~ attribute(power, 1) }} kWp
                            </div>
                        </th>
                    {% endfor %}
                    <td rowspan="2">&nbsp;</td>
                </tr>
                <tr>
                    {% for power in powers %}
                        <th>
                            <div class="m-cell-100 text-center">
                                Markup (%)
                            </div>
                        </th>
                        <th>
                            <div class="m-cell-150 text-center">
                                Preço (R$)
                            </div>
                        </th>
                    {% endfor %}
                </tr>
                </thead>
            </table>
        </div>
    </div>

    <div class="m-content">

        <div class="m-content-left">
            <div style="direction: ltr;">
            <table class="table table-bordered table-striped" style="border-right: none;">
                <tbody id="content-left-body">
                {% for type, config in collection.components %}

                    <tr>
                        <td colspan="5" style="border-right: none; text-align: left">
                            <h1> {{ config.label|trans }} </h1>
                        </td>
                    </tr>

                    {% for item in config.items %}
                        {% set product = item.product %}
                        {% set token = type ~ '-' ~ product.id %}

                        <tr data-product-info="{{ token }}"
                            data-toggle="popover"
                            data-title="{{ product.code }}"
                            data-content="{{ product.description }}"
                            data-trigger="focus"
                            data-placement="bottom"
                            data-container="#content-left-body">
                            <td>
                                {{ product.code }}
                            </td>
                            <td>
                                <div class="m-cell-200">
                                    <input readonly="readonly" placeholder="Descrição" type="text" class="form-control product-description" value="{{ product.description }}">
                                </div>
                            </td>
                            <td>
                                <div class="m-cell-100">
                                    <input placeholder="NCM" type="text" class="form-control" data-field="ncm" value="{{ product.ncm }}">
                                </div>
                            </td>
                            <td>
                                <div class="m-cell-150 block-field-prefix">
                                    <div class="input-group">
                                        <span class="input-group-addon">R$</span>
                                        <input id="{{ token ~ '-cmv-applied' }}" placeholder="CMV Aplicado" type="text" class="form-control" data-field="cmvApplied" value="{{ item.defaults.cmv }}">
                                    </div>
                                </div>
                            </td>
                        </tr>

                    {% endfor %}
                {% endfor %}

                <tr>
                    <td colspan="5">
                        &nbsp;
                    </td>
                </tr>

                </tbody>
            </table>
            </div>
        </div>

        <div class="m-content-right">

            <table class="table table-bordered table-striped" style="border-left: none;">
                {% for type, config in collection.components %}

                    <tr>
                        <td colspan="{{ powers|length }}" style="border-left: none;">
                            <h1> &nbsp; </h1>
                        </td>
                    </tr>

                    {% for item in config.items %}
                        {% set product = item.product %}
                        {% set token = type ~ '-' ~ product.id %}

                        <tr data-range-product="{{ token }}">

                            {% for range in item.ranges %}
                                <td>
                                    <div class="m-cell-100 block-field-suffix">
                                        <div class="input-group">
                                            <input data-field="markup" data-range="{{ range.id }}" placeholder="Markup" value="{{ range.markup(true)|round(2) }}" class="form-control input-markup" data-pricing="markup">
                                            <span class="input-group-addon">%</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="m-cell-150">
                                        <input data-field="price" id="range_price_{{ range.id }}" readonly="readonly" placeholder="Valor" value="{{ range.price|currency }}" class="form-control input-price">
                                    </div>
                                </td>
                            {% endfor %}

                        </tr>

                    {% endfor %}

                {% endfor %}

                <tr>
                    <td colspan="{{ powers|length }}">
                        &nbsp;
                    </td>
                </tr>

            </table>

        </div>

    </div>

</div>

<script>

    var contentLeft = $('.m-content-left');
    var contentRight = $('.m-content-right');
    var headerRight = $('.m-header-right');
    var contentLeftScrollTop = contentLeft.scrollTop();
    var contentRightScrollLeft = contentRight.scrollLeft();
    var contentRightScrollTop = contentRight.scrollTop();
    var activeMouseFocus = null;

    contentRight.on('scroll', function () {

        var currentContentRightScrollLeft = $(this).scrollLeft();
        var currentContentRightScrollTop = $(this).scrollTop();

        if (currentContentRightScrollLeft != contentRightScrollLeft) {
            contentRightScrollLeft = currentContentRightScrollLeft;
            headerRight.scrollLeft(contentRightScrollLeft);
        }

        if (currentContentRightScrollTop != contentRightScrollTop && 'contentLeft' != activeMouseFocus) {
            contentRightScrollTop = currentContentRightScrollTop;
            contentLeft.scrollTop(contentRightScrollTop);
        }
    }).on('mouseover', function () {
        activeMouseFocus = 'contentRight';
    });

    contentLeft.on('scroll', function () {

        var currentContentLeftScrollTop = $(this).scrollTop();

        if (currentContentLeftScrollTop != contentLeftScrollTop && 'contentRight' != activeMouseFocus) {
            contentLeftScrollTop = currentContentLeftScrollTop;
            contentRight.scrollTop(contentLeftScrollTop);
        }
    }).on('mouseover', function () {
        activeMouseFocus = 'contentLeft';
    });

</script>


<script>

    var RangeManager = {
        getFloat: function (field) {
            return this.toFloat(field.val());
        },
        toFloat: function(source){
            if('string' == typeof source){
                source = source.replace(',', '.');
            }
            var value = parseFloat(source);
            if (isNaN(value)) value = 0;
            return value;
        },
        request: function (url, method, data, callback) {
            $.ajax({
                url: url,
                method: method,
                data: data,
                complete: function (xhr) {
                    callback(xhr);
                }
            });
        },
        sendRanges: function(data){
            if (data.length) {
                $.ajax({
                    url: '{{ path('memorials_range_update') }}',
                    method: 'post',
                    data: {ranges: data},
                    complete: function (xhr) {
                        var response = xhr.responseJSON;
                        var ranges = response.ranges;
                        $.each(ranges, function (i, range) {
                            var price = numeral(range.price).format('$0,0.00');
                            $('#range_price_' + range.id).val(price);
                        });
                    }
                });
            }
        },
        updateRange: function (source) {

            var row = source.closest('tr');
            var info = row.data('range-product');

            var cost = this.getFloat($('#'+info+'-cmv-applied'));

            var data = [{
                id: source.data('range'),
                markup: this.getFloat(source),
                cost: cost
            }];

            this.sendRanges(data);
        },
        updateRanges: function(group, cost){

            var data = [];
            markups = group.find('[data-field="markup"]');
            $.each(markups, function (i, input) {
                var range = $(input).data('range');
                var markup = RangeManager.getFloat($(input));
                data[data.length] = {
                    id: range,
                    markup: markup,
                    cost: cost
                };
            });

            this.sendRanges(data);
        },
        onChangeProduct: function (source) {

            var field = source.data('field');
            var value = source.val();
            var row = source.closest('tr');

            var info = row.data('product-info');
            var tokens = info.split('-');
            var type = tokens[0];
            var id = tokens[1];

            if('cmvApplied' == field){
                value = this.toFloat(value);
            }

            var url = '{{ path('memorials_product_update',{id:memorial.id}) }}';

            this.request(url, 'post', {type: type, id: id, field: field, value: value}, function (xhr) {
                if (200 != xhr.status) {
                    swal('Ooops', 'Falha ao executar a operação', 'error');
                } else {
                    if ('cmvApplied' == field) {
                        RangeManager.updateRanges($('[data-range-product="'+info+'"]'), RangeManager.toFloat(value));
                    }
                }
            });
        },
        init: function () {

            $('[data-field]').on('change', function () {
                var field = $(this).data('field');
                switch (field) {
                    case 'ncm':
                    case 'cmvProtheus':
                    case 'cmvApplied':
                        RangeManager.onChangeProduct($(this));
                        break;
                    case 'markup':
                        RangeManager.updateRange($(this));
                        break;
                }
            }).on('focus', function(){
                var field = $(this).data('field');
                switch(field) {
                    case 'markup':
                    case 'cmvApplied':
                        if('undefined' == typeof $(this).data('masked')){
                            Numbers.mask($(this));
                            $(this).data('masked', 'true');
                        }
                    break;
                }
            });

            $('[data-toggle="popover"]').popover();
        }
    };

    RangeManager.init();

</script>
